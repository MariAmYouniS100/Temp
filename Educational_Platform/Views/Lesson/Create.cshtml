@model LessonViewModel
@{
    ViewData["Title"] = "Create Lesson";
    Layout = "~/Views/Shared/instructorLayout.cshtml";

    // More robust handling of ViewBag.Courses
    var courses = new SelectList(ViewBag.Courses, "ID", "Title");
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Enhanced status message display -->



            <div class="card shadow-sm my-4">
                <div class="card-header bg-primary text-white py-3">
                    <h3 class="mb-0 text-center"><i class="fas fa-book me-2"></i>Create New Lesson</h3>
                </div>
                <div class="card-body p-4">
                    <form asp-action="Create" method="post" class="needs-validation" novalidate enctype="multipart/form-data">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger mb-4"></div>

                        <!-- Title -->
                        <div class="mb-4">
                            <label asp-for="Title" class="form-label required">Title</label>
                            <input asp-for="Title" class="form-control" placeholder="Enter Lesson title" required />
                            <span asp-validation-for="Title" class="text-danger small"></span>
                        </div>

                        <!-- Supporting Files -->
                        <div class="mb-4">
                            <label class="form-label fw-bold">Supporting Files</label>
                            <div class="file-upload-wrapper">
                                <input type="file" asp-for="Files" class="form-control"
                                       accept=".pdf,.doc,.docx,.ppt,.pptx,.xls,.xlsx,.txt,.zip" />
                                <div class="form-text">Accepted formats: PDF, Word, Excel, PowerPoint, Text, ZIP (Max 10MB)</div>
                                <span asp-validation-for="Files" class="text-danger small"></span>
                            </div>
                        </div>
                        <!-- Task Files -->
                        <div class="mb-4">
                            <label class="form-label fw-bold">Task File</label>
                            <div class="file-upload-wrapper">
                                <input type="file" asp-for="TaskFile" class="form-control"
                                       accept=".pdf,.doc,.docx,.ppt,.pptx,.xls,.xlsx,.txt,.zip" />
                                <div class="form-text">Accepted formats: PDF, Word, Excel, PowerPoint, Text, ZIP (Max 10MB)</div>
                                <span asp-validation-for="TaskFile" class="text-danger small"></span>
                            </div>
                        </div>

                        <!-- Video URL -->
                        <!-- Video Upload -->
                        <div class="mb-4">
                            <label class="form-label fw-bold">Video File</label>
                            <div class="file-upload-wrapper">
                                <input type="file" asp-for="videoFile" class="form-control"
                                       accept="video/*,.mp4,.mov,.avi,.wmv" />
                                <div class="form-text">Accepted formats: MP4, MOV, AVI, WMV (Max 50MB)</div>
                                <span asp-validation-for="videoFile" class="text-danger small"></span>
                            </div>
                        </div>


                        <!-- Schedule Date -->
                        <div class="mb-4">
                            <label asp-for="Create_date" class="form-label">Schedule Date</label>
                            <input asp-for="Create_date" type="datetime-local" class="form-control" />
                            <span asp-validation-for="Create_date" class="text-danger small"></span>
                        </div>

                        <!-- Course Selection -->
                        <div class="form-group">
                            @Html.LabelFor(m => m.Course)
                            <select class="form-control" asp-items="@courses" asp-for="CourseID">
                                <option value="0">--- Select Department ---</option>
                            </select>
                            @Html.ValidationMessageFor(m => m.CourseID, "", new { @class = "text-danger" })
                        </div>

                        <!-- Form Buttons -->
                        <div class="d-grid gap-3 d-md-flex justify-content-md-end mt-4 pt-3 border-top">
                            <a asp-action="Index" class="btn btn-outline-secondary me-md-2">
                                <i class="fas fa-times me-1"></i>Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i>Create Lesson
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Bootstrap validation
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', function(event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });

            // Auto-dismiss alerts after 5 seconds
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                setTimeout(() => {
                    const bsAlert = bootstrap.Alert.getOrCreateInstance(alert);
                    bsAlert.close();
                }, 5000);
            });

            // Enhance datetime-local input
            const dateInput = document.querySelector('input[type="datetime-local"]');
            if (dateInput && !dateInput.value) {
                const now = new Date();
                now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
                dateInput.value = now.toISOString().slice(0, 16);
            }
        });
    </script>
}

<style>
    .form-control, .form-select {
        border-radius: 0.375rem;
        padding: 0.625rem 1rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .form-control:focus, .form-select:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .form-label {
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #495057;
    }

    .required:after {
        content: " *";
        color: #dc3545;
    }

    .card {
        border: none;
        border-radius: 0.5rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
    }

    .card-header {
        border-radius: 0.5rem 0.5rem 0 0 !important;
        padding: 1.25rem 1.5rem;
    }

    .card-body {
        padding: 2rem;
    }

    .text-danger.small {
        font-size: 0.875em;
    }

    .btn {
        padding: 0.5rem 1.25rem;
        font-weight: 500;
    }
</style>